# -*- coding: utf-8 -*-
import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

# 参考 https://github.com/diyjac/smartcab.git
class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. 
        一个代理学会开车在Smartcab世界
    """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 设置一个代理环境
        self.planner = RoutePlanner(self.env, self)  # Create a route planner 创建一个路由计划
        self.valid_actions = self.env.valid_actions  # The set of valid actions 有效动作集

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn 代理是否需要学习
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples 创建一个Q-table，存储元组的字典
        self.epsilon = epsilon   # Random exploration factor 随机探索因子
        self.alpha = alpha       # Learning factor 学习因子

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        # 参考 https://github.com/diyjac/smartcab.git
        self.t = 0
        random.seed(0)

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used once training trials have completed. 
            重置函数用于每次实验的开始，
            如果测试试验已经完成或正在使用，testing设置为True
            """

        # Select the destination as the new location to route to 选择目的地作为路由到的新位置
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice 使用您选择的衰减函数更新ε
        # Update additional class parameters as needed 根据需要更新其他类参数
        # If 'testing' is True, set epsilon and alpha to 0
        if(testing):
            self.epsilon = 0
            self.alpha = 0
        else:
            self.t += 1.0
            self.epsilon = math.fabs(math.cos(self.alpha*self.t))
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. 
            build_state函数用于代理从环境中请求数据，下一个方向点，交叉口等输入，到达期限是所有有用特征对于代理程序
            """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 目的地应该行驶的方向，车头方向的相对值
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        # inputs 包含klight交通灯颜色，left左侧车辆目的方向，right右侧车辆目的方向，oncoming交叉方向车辆目的方向，没有车辆则为None
        deadline = self.env.get_deadline(self)  # Remaining deadline 在时间之内到达目的地需要的步数

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent  
        # 设置 state 为一个tuple类型的相关数据对agent
        # 参考 https://github.com/diyjac/smartcab.git
        def tostr(st):
            if st is None:
                return 'None'
            else:
                return str(st)
        state = tostr(waypoint) + "_" + inputs['light'] + "_" + tostr(inputs['left']) + "_" +  tostr(inputs['oncoming'])
        if self.learning:
            self.Q[state] = self.Q.get(state, {None:0.0, 'forward':0.0, 'left':0.0, 'right':0.0})
        
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. 
            get_maxQ函数，用于找到所有动作的Q-value最大值在当时的状态
            """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        # 计算所有步骤的Q-value最大值对于给定的状态

        maxQ = -1000.0
        for action in self.Q[state]:
            if maxQ < self.Q[state][action]:
                maxQ = self.Q[state][action]

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. 
        createQ函数用于代理程序生成一个状态
        """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        
        # 当学习时，检查如果状态不是Q-table，如果它不是，为状态创建一个新的字典，然后对于每个有效的动作，设置初始Q-value为0
        if self.learning:
            self.Q[state] = self.Q.get(state, {None:0.0, 'forward':0.0, 'left':0.0, 'right':0.0})

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. 
            choose_action 当代理程序试图选择一个动作时，基于当前的状态
            """

        # Set the agent state and default action 默认的动作设置代理状态
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
 
        # 当不学习时，选择一个随机动作，当学习时，使用epsilon概率选择一个随机动作，否则，选择一个动作使用Q-value的最大值对于当前状态
        # 参考 https://github.com/diyjac/smartcab.git
        if not self.learning:
            action = random.choice(self.valid_actions)
        else:
            if self.epsilon > 0.01 and self.epsilon > random.random():
                action = random.choice(self.valid_actions)
            else:
                valid_actions = []
                maxQ = self.get_maxQ(state)
                for act in self.Q[state]:
                    if maxQ == self.Q[state][act]:
                        valid_actions.append(act)
                action = random.choice(valid_actions)
        
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. 
            learn函数用于代理程序完成一个动作并获得一个奖励后被调用，这个函数在学习时不考虑将来的回报
            """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        # 当学习时，实现值迭代更新规则，只使用学习率α（不使用折扣因子γ）
        if self.learning:
            self.Q[state][action] = self.Q[state][action] + self.alpha*(reward-self.Q[state][action])
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. 
            update函数当一个时间步长在给定的试验环境中完成时，将调用update函数。这个函数将构建代理状态，选择动作，接收奖励，并学习是否启用
            """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. 
        运行仿真的驱动功能，按ESC关闭模拟，或SPACE暂停模拟
        """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.01)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.01, log_metrics=True, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=100, tolerance=0.001)


if __name__ == '__main__':
    run()